; The sequence of triangle numbers is generated by adding the natural numbers. 
; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
; The first ten terms would be:
; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
; Let us list the factors of the first seven triangle numbers:
;  1: 1
;  3: 1,3
;  6: 1,2,3,6
; 10: 1,2,5,10
; 15: 1,3,5,15
; 21: 1,3,7,21
; 28: 1,2,4,7,14,28
; We can see that 28 is the first triangle number to have over five divisors.
; What is the value of the first triangle number to have over five hundred divisors?

; nth triangle num = (1..n).reduce(:+) ;ruby
(defun range-iter (a b c)
	(cond ((> a b) c)
		((<= a b) (range-iter (+ 1 a) b (cons a c)))))

(defun range (start stop)
	(nreverse (range-iter start stop '())))

(defun range1-n (n)
	(let ((x '()))
		(dotimes (i n) (push (+ 1 i) x))
		(nreverse x)))

(defun range-s (n) 
	(loop for i from 1 to n collecting i))

; (defun triangle (n &optional lst)
; 	(cond ((equal lst '())
; 		(reduce '+ (range-s n)))
; 		(t (reduce '+ lst))))
(defun triangle2 (n)
	(let ((x 0))
		(dotimes (i (+ 1 n)) (setq x (+ x i))) x))

; (defun factors (n &optional lst)
; 	(cond ((equal lst '())
; 		(factors n (range-s n)))
		; (t (remove-if-not (lambda (x) (= 0 (mod n x))) lst))))
; (defun factors2 (n)
; 	(let ((x '()))
; 		(dotimes (i (1+ n)) (if (> i 0) (if (= 0 (mod n i)) (setq x (push i x)))))
; 		(nreverse x)))
(defun factors2 (n)
	(let ((x '()))
		(dotimes (i (1+ n)) (when (> i 0) (if (= 0 (mod n i)) (push i x)))))
		x))
; (defun euler12 (n)
; (cond ((> (length (factors (triangle n))) 5) n) (t '())))

(dotimes (x 10000000)
 	(let ((j (factors2 (triangle2 x))))
 	(if (> (length j) 500) (progn (print j)(print x)(return)))))
; x = 12375, triangle2 x = 76576500 ; yay!!